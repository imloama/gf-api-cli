package service

import (
	"errors"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/net/ghttp"
	"github.com/gogf/gf/os/gtime"
	"{{.TplImportPrefix}}/dao"
	"{{.TplImportPrefix}}/model"
)

type i{{.TplTableNameCamelCase}}Service struct{}
var {{.TplTableNameCamelCase}}Service = new(i{{.TplTableNameCamelCase}}Service)

type {{.TplTableNameCamelCase}}PageRequst struct {
	PageNumber int         `json:"page_number"` // 页码
	PageSize   int         `json:"page_size"`   // 每页记录数
	{{.TplTableNameCamelCase}}QueryRequest
}

type {{.TplTableNameCamelCase}}QueryRequest struct {
    {{.TplColumnDefine}}
}

// 新增请求参数
type {{.TplTableNameCamelCase}}AddRequest struct {
    {{.TplColumnDefine}}
}

// 更新请求参数
type {{.TplTableNameCamelCase}}UpdateRequest struct{
    {{.TplColumnDefine}}
}

//  {{.TplTableNameCamelCase}}分页查询返回结果
type {{.TplTableNameCamelCase}}PageResponse struct {
	PageNumber int                   `json:"page_number"` // 页码
	PageSize   int                   `json:"page_size"`   // 每页记录数
	Total      int                   `json:"total"`       // 总记录数
	Pages      int                   `json:"pages"`       // 多少页
	Data       []*{{.TplTableNameCamelCase}}Response `json:"data"`        // 查询结果
}

type {{.TplTableNameCamelCase}}Response struct {

}

// 新增
func(svr *i{{.TplTableNameCamelCase}}Service)Insert(r *ghttp.Request,data *{{.TplTableNameCamelCase}}AddRequest)error{
	result := g.Map{
		//"code": data.Code,
		//"name": data.Name,
		"created_at": gtime.Now(),
		"updated_at": gtime.Now(),
	}
	res, err := dao.{{.TplTableNameCamelCase}}.Insert(result)
	if err!=nil{
		g.Log().Errorf("保存失败！%v", err)
		return err
	}
	if i,_:=res.RowsAffected();i<=0{
		return errors.New("新增失败！")
	}
	return nil
}

// 修改
func(svr *i{{.TplTableNameCamelCase}}Service)Modify(r *ghttp.Request, id int64,data *{{.TplTableNameCamelCase}}UpdateRequest)(*{{.TplTableNameCamelCase}}Response, error){
	//TODO 自定义内容
	res, err := dao.{{.TplTableNameCamelCase}}.Data(data).Where("id = ?", id).Update()
	if err!=nil{
		g.Log().Errorf("修改失败！%v", err)
		return nil, err
	}
	if i,_:=res.RowsAffected();i<=0{
		return nil, errors.New("修改失败！")
	}
	var result  *{{.TplTableNameCamelCase}}Response
	err = dao.{{.TplTableNameCamelCase}}.Where("id=?", id).Scan(result)
	return result, err
}

// 根据id查询
func(svr *i{{.TplTableNameCamelCase}}Service)GetById(r *ghttp.Request, id int64)(*{{.TplTableNameCamelCase}}Response, error){
	var result  *{{.TplTableNameCamelCase}}Response
	err := dao.{{.TplTableNameCamelCase}}.Where("id=?", id).Scan(result)
	return result, err
}

// 根据ID删除
func(svr *i{{.TplTableNameCamelCase}}Service)DeleteById(r *ghttp.Request,id int64)error{
	res, err := dao.{{.TplTableNameCamelCase}}.Delete("id = ?", id)
	if err!=nil{
		g.Log().Errorf("根据ID失败！%v", err)
		return err
	}
	if i,_:=res.RowsAffected();i<=0{
		return errors.New("根据ID失败！")
	}
	return nil
}

// 分页查询
func(svr *i{{.TplTableNameCamelCase}}Service)Page(r *ghttp.Request,req *{{.TplTableNameCamelCase}}PageRequst)(*{{.TplTableNameCamelCase}}PageResponse, error){
	if req.PageSize <= 0 {
		req.PageSize = 10
	}
	if req.PageNumber <= 0 {
		req.PageNumber = 1
	}
	offset := (req.PageNumber - 1) * req.PageSize
	//TODO 其它查询条件
	//where := g.Map{}

	totals, err := dao.{{.TplTableNameCamelCase}}.Count(req.{{.TplTableNameCamelCase}}QueryRequest)
	if err!=nil{
		g.Log().Errorf("连接数据库查询{{.TplTableName}}总数发生错误！%v", err)
		return nil, err
	}
	//TODO 处理fields
	var list []*{{.TplTableNameCamelCase}}Response
	err = dao.{{.TplTableNameCamelCase}}.Where(req.{{.TplTableNameCamelCase}}QueryRequest).Offset(offset).Limit(req.PageSize).Scan(&list)
	if err!=nil{
		g.Log().Errorf("连接数据库查询{{.TplTableName}}分页数据发生错误！%v", err)
		return nil, err
	}
	pages := 0
	if totals >0{
		pages = totals / req.PageSize
		if totals % req.PageSize > 0 {
			pages ++
		}
	}
	return &{{.TplTableNameCamelCase}}PageResponse{
		PageNumber: req.PageNumber,
		PageSize: req.PageSize,
		Total: totals,
		Pages: pages,
		Data: list,
	}, nil

}

// 列表查询
func(svr *i{{.TplTableNameCamelCase}}Service)List(r *ghttp.Request,where *{{.TplTableNameCamelCase}}QueryRequest)([]*{{.TplTableNameCamelCase}}Response, error){
	//TODO 处理fields
	var list []*{{.TplTableNameCamelCase}}Response
	err := dao.{{.TplTableNameCamelCase}}.Where(where).Scan(&list)
	if err!=nil{
		g.Log().Errorf("连接数据库查询{{.TplTableName}}列表数据发生错误！%v", err)
		return nil, err
	}
	return list, nil
}


// 单个查询
func(svr *i{{.TplTableNameCamelCase}}Service)One(where ...interface{})(*model.{{.TplTableNameCamelCase}}, error){
	record, err := dao.{{.TplTableNameCamelCase}}.One(where)
	if err!=nil{
		return nil, err
	}
	return svr.Record2Model(record)
}

// 查询所有
func(svr *i{{.TplTableNameCamelCase}}Service)All(where ...interface{})([]*model.{{.TplTableNameCamelCase}}, error){
	result, err := dao.{{.TplTableNameCamelCase}}.All(where)
	if err!=nil{
		return nil, err
	}
	return svr.List2Models(result)
}

// 更新字段
func(svr *i{{.TplTableNameCamelCase}}Service)Update(data interface{},where ...interface{})(int64, error){
	result, err := dao.{{.TplTableNameCamelCase}}.Data(data).Where(where).Update()
	if err!=nil{
		return 0, err
	}
	if i, err := result.RowsAffected();err!=nil{
		return 0,err
	}else{
		return i,nil
	}
}

func(svr *i{{.TplTableNameCamelCase}}Service)Exec(sql string, args ...interface{}) (int64, error) {
	result, err := dao.{{.TplTableNameCamelCase}}.DB.Exec(sql, args)
	if err!=nil{
		return 0, err
	}
	if i, err := result.RowsAffected();err!=nil{
		return 0,err
	}else{
		return i,nil
	}
}

func(svr *i{{.TplTableNameCamelCase}}Service)Query(sql string, args ...interface{}) (*sql.Rows, error) {
	return dao.{{.TplTableNameCamelCase}}.DB.Query(sql, args)
}

func(svr *i{{.TplTableNameCamelCase}}Service)ScanList(rows *sql.Rows, entity interface{}) error {
	return rows.Scan(entity)
}

func(svr *i{{.TplTableNameCamelCase}}Service)QueryAndScanList(entity interface{}, sql string, args ...interface{})error{
	rows,err:=svr.Query(sql, args)
	if err!=nil{
		return err
	}
	return svr.ScanList(rows, entity)
}

func(svr *i{{.TplTableNameCamelCase}}Service)Record2Model(record gdb.Record)(*model.{{.TplTableNameCamelCase}}, error){
	var entity *model.{{.TplTableNameCamelCase}}
	if err := record.Struct(&entity); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entity, nil
}

func(svr *i{{.TplTableNameCamelCase}}Service)List2Models(result gdb.Result)([]*model.{{.TplTableNameCamelCase}}, error){
	var entities []*model.{{.TplTableNameCamelCase}}
	if err := result.Structs(&entities); err != nil && err != sql.ErrNoRows {
		return nil, err
	}
	return entities, nil
}